Chapter 5

Defining and Instantiating Structs
Structs are similar to tuples. The pieces of a struct can be different types.
    - Unlike tuples, you'll name each piece of data so it's clear what the values means
    - More flexible than tuples
    - The data within a struct are called fields
Ex:

struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}
or

let mut user1 = User {
    email: String::from("someone@example.com"),
    username: String::from("someusername123"),
    active: true,
    sign_in_count: 1,
};

*Entire instance is mutable
    - We can change its value
user1.email = String::from("anotheremail@example.com");

Field Init Shorthand
    - When variables and fields have the same name
Ex:
fn build_user(email: String, username: String) -> User {
    User {
    email: email,
    username: username,
    active: true,
    sign_in_count: 1,
}
}

String email and String username are the same so we can use init shorthand.
fn build_user(email: String, username: String) -> User {
User {
    email,
    username,
    active: true,
    sign_in_count: 1,
}
}

Creating Instances from Other Instances with Struct Update
let user2 = User {
    email: String::from("another@example.com"),
    username: String::from("anotherusername567"),
    active: user1.active,
    sign_in_count: user1.sign_in_count,
};

let user2 = User {
email: String::from("another@example.com"),
username: String::from("anotherusername567"),
..user1 // same values for sign_in_count and user1
};

Using Tuple Structs w/o named fields to Create different Types
    - Tuple structs useful when you want to give the whole name and make the tuple be a different type than other tuples an dnaming each struct would be redundant
Ex:
Color(i32, i32, i32);
struct Point(i32, i32, i32);

let black = Color(0, 0, 0);
let origin = Point(0, 0, 0);
* Black and Origin vlaues are different types bc they are instances of different tuple structs

Unit-Like Structs without Any fields
    - Structs don't need fields (Unit-like structs)
    - useful when you need to implement a strait but don;t have any t data

Ownership of Struct Data
    - Possible for structed to store references to data owned by something else
    - requires use of lifetimes

Example Programn using Structs:
(in main)


Method Syntax
    - Similar to functions 

Methods with more parameters:
    - can_hold sees if a rectangle can fit in another rectable

fn main() {
    let rect1 = Rectangle { width: 30, height: 50 };
    let rect2 = Rectangle { width: 10, height: 40 };
    let rect3 = Rectangle { width: 60, height: 45 };
    println!("Can rect1 hold rect2? {}", rect1.can_hold(&rect2));   //true
    println!("Can rect1 hold rect3? {}", rect1.can_hold(&rect3));   //false
}

impl Rectangle {
fn area(&self) -> u32 {
self.width * self.height
}
fn can_hold(&self, other: &Rectangle) -> bool {
self.width > other.width && self.height > other.height
}
}

Associated Functions:
    - allowed to define impl blocks that don;t take self as aprameter
    - Used for constructors that will return a new instance of the struct

    impl Rectangle {
fn square(size: u32) -> Rectangle {
Rectangle { width: size, height: size }
}
}

    - To call this assocaited function we use the :: syntax with teh struct name
Ex:
let sq = Rectangle::square(3);

Multiple Impl blocks

impl Rectangle {
    fn area(&self) -> u32 {
    self.width * self.height
    }
}
impl Rectangle {
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}
