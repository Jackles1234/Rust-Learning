##### CHAPTER 8 #####

In this chapter we will discuss three collections that are often in rust programs

Vector: allows you to store an n number of values next to each other
String: collection of characters.
Hash Map: allows you to associate a value with a particular key. Its a particular impleneation of a map.

Storing Lists of Values with Vectors:
Vectors allow more than one vlaue in a single data structure that puts all the values next to each other in memory.
However, they can only store values of the same type.

Ex; (holding values of type i32)
let v: Vec<i32> = Vec::new()

We added a type annotation here becayuse we havent inserted values yet. Therefore, rust doesnt know what elements we tend to store
However, more common to create a vector with values so rust can understand type. Rust provides vec! macro for conveniernce. 

Ex;
let v = vec![1,2,3];

Updating a Vector:
Use push to add elements to it:

let mut v =Vec::new();
v.push(5);
v.push(6);
v.push(7);
v.push(8);

* Want to make it mutable using mut keyword. Rust defaults ot i32 when not give type annotation

Like any other struct, vectors are freed when it goes out of scope

{
let v = vec![1, 2, 3, 4];
// do stuff with v
} // <- v goes out of scope and is freed here Listing 8-4: Showing where the
vector and its elements are dropped

Reading elements of Vectors:

There are two ways to reference a value stored in a vector:
EX:
let v = vec![1, 2, 3, 4, 5];
let third: &i32 = &v[2];    //Index 2 to get third value
let third: Option<&i32> = v.get(2); //Index //get method 

If you try to reference an index out of scope, the first method will cause program to panic
Good if you want yoyur program to crash upon IndexError

When the .get() method is passed an out of scope index, it returns none


Will this code work?
let mut v = vec![1, 2, 3, 4, 5];
let first = &v[0];
v.push(6);

No!
Looks like it should work though
This is due to the fact that sometimes appending to a vector may require new memory allocation


Iterating over Values in a vector:

let v = vec![100, 32, 57]
for i in $v {
    println!("{}", i)
}

or ...

let mut v = vec![100, 32, 57]
for i in &mut v {
    *i ==50;
}

To change a value that a mutable rference refers to,
we need to use the dereferenc operator (*) to get the value in i before we can use the += operator

Using an Enum to Store Multiple Types
Vectors can only store one type of value, but by using enums, which are stored under the same type, we can store multiple types of data in a vector

Ex:

enmum SpreadsheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}

let row = vec![
    SpreadsheetCell:Int(3),
    SpreadsheetCell:Text(String::from("blue")),
    SpreadsheetCell::Float(10.12),
];

Rust needs to know what types will be in the vector at compile time so it can allocate appropriate memory
If you don;t know the set types, the program will throw runtime error. However, you can use a trait object covered later

Strings:

Str is a string slice which is different thatn the Rust standard library string
String type is growable, mutable, owned, UTF-8 encoded.

The term String usually refers to both of these

Creating a new String:

let mut s = String::new();

//or ...

let data = "initial contents";
let s = data.to_string();

//or

let s = String::from("initial contents"); // Equivelant to tostring()

Updating a String:
push_str to append a string
Ex;

let mut s = String::from("foo");
s.push_str("bar");
// s = "foodbar"

let mut s1 = String:: from("Foo")
let s2 = "bar";
s1.push(s2);
println!("s2 is {}", s2);

let mut s = String:: from("lo");
s.push('l');
// s will contain lol

Concatenation with the + Operator or the format! Macro:
let s1 = String::from("Hello, ");
let s2 = String::from("world!");
let s3 = s1 + &s2; // s1 has moved here and can no longer be used.

The string s3 will contain "Hello world!" as a result. However, s1 will not be valid due to the signature of the method that gets called when we use the + operator.

fn add(self, s: &str) -> String {}

First, S2 has a reference (&s2) and because of teh paramater for + we can only add &str to a String
The add Operator uses 'deref coercion' which turn &s2 -> &s2[..].

Second, we can see in the signature tha tadd takes ownership of self because slef does not have an &.
While 'let s3 = s1 + &s2; looks like it will copy both strings and create a new one, it actually take sownership of s1, appends a copy of contents of s2 and then returns ownership opf the result. 

Combining Multiple Strings: 

let s1 = String::from("tic");
let s2 = String::from("tac");
let s3 = String::from("toe");
let s = s1 + "-" + &s2 + "-" + &s3;

//gets quite difficult to read and can increase in complexity with more string combining.

Combining Multiple Strings with format! macro:

let s1 = String::from("tic");
let s2 = String::from("tac");
let s3 = String::from("toe");
let s = format!("{}-{}-{}", s1, s2, s3);

A lot more readable and easier


Indexing into Strings:
In many other languages, accessing individual characters in a string by referencing them by index is a valid and common operation. However, this will throw an error in rust.

Internal Representation: 
String is a wrapper over a Vec<u8>. Lets look at our properly encoded UTF-8 strings.
Ex:
let len String::from("Hola").len(); //len=4
//or 
let len = String::from("Здравствуйте").len(); // len = 24 not 12! It takes 24 bytes to encode len.

Now what would happen iof you tried to index 'Здравствуйте' ?
Would [1] be З?

Bytes and Scalar Values and Grapheme Clusters! Oh My! : 
Another point about UTF-8 is that there are actually three relevant ways to look at strings from Rust’s perspective: as bytes, scalar values, and grapheme clusters

A final reason Rust doesn’t allow us to index into a String to get a character is that indexing operations are expected to always take constanttime (O(1)).

Slicing Strings:
Indexing into a string is often a bad idea because its not lcear what the reutrn typoe of teh string-indexing operation should be:
    - a byte value
    - a character
    - a grapheme cluster
    - a string slice
Therefore, Rust asks you to be more specific if you really need to use indices to create string slices.

Methods for Iterating over Strings:
Fortunately, you can access elements in a string in other ways.

If you need to perform operations on individual Unicode scalar values, the best way to do so is to use the chars method. 

for c in "Здравствуйте".chars(){
    printlin!("{}", c);
}

Otherwise, .bytes returnes each raw byte which might be appropriate.

for b in "Здравствуйте".bytes(){
    println!("{}", b);
}

##### HASH MAPS ######

Storing Keys with Associated Values in Hash Maps:
Type HashMap<K,V> stores keys of type k and value of type v. 

Creating a New Hash Map:

use std::collections::HashMap;
let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);

Just like vectors, hash maps store their data on the heap.
The collect method gathers data into a number of collection types, including HashMap. 
For example, if we had the team names and initial scores in two separate vectors, we could use the zip method to create a vector of tuples where "Blue" is paired with 10, and so forth.
Then we could use the collect method to turn that vecto rof tuples into a hash map.
Ex:
use std::collections::HashMap;
let teams = vec![String::from("Blue"), String::from("Yellow")];
let initial_scores = vec![10, 50];
let scores: HashMap<_, _> = teams.iter().zip(initial_scores.iter()).collect();

Hash Maps and Ownership:
For tyoes that implement the Copy trait, such as i32, the values are copied into the hash map. 
For owned vlaues, such as String, the values will be moved and the hash map will be the owner of those values.

use std::collections::HashMap;
let field_name = String::from("Favorite color");
let field_value = String::from("Blue");
let mut map = HashMap::new();
map.insert(field_name, field_value);
/ field_name and field_value are invalid at this point, try using them and
// see what compiler error you get!

We aren’t able to use the variables field_name and field_value after
they’ve been moved into the hash map with the call to insert.

Accessing Values in a Hash Map:

use std::collections::HashMap;

let mut scores = HashMap::new();

scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);

let team_name = String::from("Blue");
let score = scores.get(&team_name); 

Score will have the value thats associated wirth Blue team, and the result will be some(&10)
The result is wrapped in some because get returns an option<&V>;
If no value, get will return None.

We can iterate over ecah k/v pair in a hasmap in a similar manner as we do with vectors using a for loop: 

use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);

for (key, value) in &scores {
    println!("{}: {}", key, value);
}


Updating a Hash Map:

Overwriting:
use std::collections::HashMap;
let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Blue"), 25);
println!("{:?}", scores);

// This code will print  {"Blue": 25}

Only Inserting a Value If the Key Has No Value:
It’s common to check whether a particular key has a value and, if it doesn’t, insert a value for it.

The return value of the entry method is an enum called Entry that represents a value that might or might not exist.

use std::collections::HashMap;

let mut scores = HashMap::new();

scores.insert(String::from("Blue"), 10);
scores.entry(String::from("Yellow")).or_insert(50);
scores.entry(String::from("Blue")).or_insert(50);
//This code will print {"Yellow": 50, "Blue": 10}.
println!("{:?}", scores);

//Using the entry method to only insert if the key does not already have a value

The or_insert method on Entry is defined to return mutable reference to the value for the corresponding ENtry key if that key exists and if not inserts the parameter as the new value for this key returns a m,utable referencve ot eh new value. 

Updating a Value Based on the Old Value:

use std::collections::HashMap;

let text = "hello world wonderful world";

let mut map = HashMap::new();

for word in text.split_whitespace() {
let count = map.entry(word).or_insert(0);
*count += 1;
}

println!("{:?}", map); 

// Counting occurrences of words using a hash map that stores words and counts

//This Code will print {"world": 2, "hello": 1, "wonderful": 1}

Hashing Functions:

HashMap uses a cryptographically secure hashing function that can provide resistance to Denial of Service (DoS) attacks.
If you profile your code and find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different hasher.